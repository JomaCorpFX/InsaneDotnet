// <auto-generated />
using System;
using Insane.AspNet.Identity.Model1.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

namespace Insane.Migrations.Oracle.Identity1OracleDbContext_
{
    [DbContext(typeof(Identity1OracleDbContext))]
    [Migration("20210628021601_Migration_Identity1OracleDbContext_1")]
    partial class Migration_Identity1OracleDbContext_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasAnnotation("Oracle:IdentityIncrement", 1)
                        .HasAnnotation("Oracle:IdentitySeed", 10000)
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTimeOffset>("ActiveUntil")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("AddresssLine2")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("LogoUri")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("NVARCHAR2(16)");

                    b.HasKey("Id")
                        .HasName("P_Identity_Organization_Id_58009");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("U_Identity_Organization_Name_9b40f");

                    b.ToTable("Organization", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasAnnotation("Oracle:IdentityIncrement", 1)
                        .HasAnnotation("Oracle:IdentitySeed", 10000)
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTimeOffset>("ActiveUntil")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<bool>("Enabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("NUMBER(19)");

                    b.Property<long>("RoleId")
                        .HasColumnType("NUMBER(19)");

                    b.Property<long>("UserId")
                        .HasColumnType("NUMBER(19)");

                    b.HasKey("Id")
                        .HasName("P_Identity_Permission_Id_a73aa");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("I_Identity_Permission_OrganizationId_29aa7");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("I_Identity_Permission_RoleId_19e55");

                    b.HasIndex("UserId")
                        .HasDatabaseName("I_Identity_Permission_UserId_777e2");

                    b.HasIndex("UserId", "RoleId", "OrganizationId")
                        .IsUnique()
                        .HasDatabaseName("U_Identity_Permission_UserId_RoleId_OrganizationId_79cd0");

                    b.ToTable("Permission", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.Platform", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasAnnotation("Oracle:IdentityIncrement", 1)
                        .HasAnnotation("Oracle:IdentitySeed", 10000)
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTimeOffset>("ActiveUntil")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR2(512)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("LogoUri")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.HasKey("Id")
                        .HasName("P_Identity_Platform_Id_dffd7");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("U_Identity_Platform_Name_5a64e");

                    b.HasIndex("SecretKey")
                        .IsUnique()
                        .HasDatabaseName("U_Identity_Platform_SecretKey_0823c");

                    b.ToTable("Platform", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasAnnotation("Oracle:IdentityIncrement", 1)
                        .HasAnnotation("Oracle:IdentitySeed", 10000)
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTimeOffset>("ActiveUntil")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<bool>("Enabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR2(128)");

                    b.HasKey("Id")
                        .HasName("P_Identity_Role_Id_0808f");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("U_Identity_Role_Name_d6d1e");

                    b.ToTable("Role", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasAnnotation("Oracle:IdentityIncrement", 1)
                        .HasAnnotation("Oracle:IdentitySeed", 10000)
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientFriendlyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("ClientIP")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("NVARCHAR2(64)");

                    b.Property<decimal>("ClientLatitude")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<decimal>("ClientLongitude")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<string>("ClientOS")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<int>("ClientTimezone")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("ClientUserAgent")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("NVARCHAR2(512)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<string>("Jti")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<long>("PermissionId")
                        .HasColumnType("NUMBER(19)");

                    b.Property<long>("PlatformId")
                        .HasColumnType("NUMBER(19)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<bool>("Revoked")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.HasKey("Id")
                        .HasName("P_Identity_Session_Id_c4735");

                    b.HasIndex("Jti")
                        .IsUnique()
                        .HasDatabaseName("U_Identity_Session_Jti_2617e");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("U_Identity_Session_Key_8e0f1");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("I_Identity_Session_PermissionId_bd69d");

                    b.HasIndex("PlatformId")
                        .HasDatabaseName("I_Identity_Session_PlatformId_3f620");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasDatabaseName("U_Identity_Session_RefreshToken_16772");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasDatabaseName("U_Identity_Session_TokenHash_f7bdb");

                    b.ToTable("Session", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(19)")
                        .HasAnnotation("Oracle:IdentityIncrement", 1)
                        .HasAnnotation("Oracle:IdentitySeed", 10000)
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("EmailConfirmationCode")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTimeOffset>("EmailConfirmationDeadline")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTimeOffset>("LockoutUntil")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<int>("LoginFailCount")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("NVARCHAR2(16)");

                    b.Property<string>("MobileConfirmationCode")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTimeOffset>("MobileConfirmationDeadline")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<bool>("MobileConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("NormalizedUsername")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .HasColumnType("NVARCHAR2(16)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("NVARCHAR2(128)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR2(128)");

                    b.HasKey("Id")
                        .HasName("P_Identity_User_Id_8d3bc");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("U_Identity_User_Email_aad66");

                    b.HasIndex("Mobile")
                        .IsUnique()
                        .HasDatabaseName("U_Identity_User_Mobile_192e6");

                    b.HasIndex("UniqueId")
                        .IsUnique()
                        .HasDatabaseName("U_Identity_User_UniqueId_86495");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("U_Identity_User_Username_66295");

                    b.ToTable("User", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.Permission", b =>
                {
                    b.HasOne("Insane.AspNet.Identity.Model1.Entity.Organization", "Organization")
                        .WithMany("Permissions")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("F_Identity_Permission_OrganizationId_abfa1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Insane.AspNet.Identity.Model1.Entity.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("F_Identity_Permission_RoleId_3b3a4")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Insane.AspNet.Identity.Model1.Entity.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("F_Identity_Permission_UserId_7b5da")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.Session", b =>
                {
                    b.HasOne("Insane.AspNet.Identity.Model1.Entity.Permission", "Permission")
                        .WithMany("Sessions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("F_Identity_Session_PermissionId_16c18")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Insane.AspNet.Identity.Model1.Entity.Platform", "Platform")
                        .WithMany("Sessions")
                        .HasForeignKey("PlatformId")
                        .HasConstraintName("F_Identity_Session_PlatformId_45747")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.Organization", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.Permission", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.Platform", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
