// <auto-generated />
using System;
using Insane.AspNet.Identity.Model1.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Insane.WebApiLiveTests.Migrations.SqlServer.IdentitySqlServerDbContext_
{
    [DbContext(typeof(IdentitySqlServerDbContext))]
    [Migration("20220212101750_Migration_IdentitySqlServerDbContext_1")]
    partial class Migration_IdentitySqlServerDbContext_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityAccess<string>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ActiveUntil")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id")
                        .HasName("P_IdentityIdentityAccess_Id_AB31D");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("I_IdentityIdentityAccess_RoleId_EF364");

                    b.HasIndex("UserId")
                        .HasDatabaseName("I_IdentityIdentityAccess_UserId_FDC64");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentityAccess_UserId_RoleId_841D3");

                    b.ToTable("IdentityAccess", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityLog<string>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelatedExceptionStacktrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("IdentityLog", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityPlatform<string>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTimeOffset?>("ActiveUntil")
                        .IsConcurrencyToken()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("AdminUserId")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("ApiKey")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(900)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<bool>("InDevelopment")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<bool>("IsServerSide")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("LogoUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RememberDeviceStrategy")
                        .HasColumnType("int");

                    b.Property<bool>("RevokeTokenWhenLogout")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("P_IdentityIdentityPlatform_Id_0A89D");

                    b.HasIndex("AdminUserId")
                        .HasDatabaseName("I_IdentityIdentityPlatform_AdminUserId_CAD20");

                    b.HasIndex("ApiKey")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentityPlatform_ApiKey_452A7");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentityPlatform_Name_D45B0");

                    b.ToTable("IdentityPlatform", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityRole<string>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTimeOffset?>("ActiveUntil")
                        .IsConcurrencyToken()
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Enabled")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("LogoUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("P_IdentityIdentityRole_Id_B8DAC");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentityRole_Name_319E0");

                    b.ToTable("IdentityRole", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentitySession<string>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTimeOffset?>("ActiveUntil")
                        .IsConcurrencyToken()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ClientDeviceUid")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ClientFriendlyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ClientIP")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<decimal?>("ClientLatitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ClientLongitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClientOS")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ClientTimezone")
                        .HasColumnType("int");

                    b.Property<string>("ClientUserAgent")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("Confirmed")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .IsConcurrencyToken()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Jti")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("JwtHash")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PlatformId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RefreshToken")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("Revoked")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("SessionKey")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .IsConcurrencyToken()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("Id")
                        .HasName("P_IdentityIdentitySession_Id_0F348");

                    b.HasIndex("Jti")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentitySession_Jti_45260");

                    b.HasIndex("JwtHash")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentitySession_JwtHash_9EA00");

                    b.HasIndex("PlatformId")
                        .HasDatabaseName("I_IdentityIdentitySession_PlatformId_55045");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentitySession_RefreshToken_32CD0");

                    b.HasIndex("SessionKey")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentitySession_SessionKey_2222A");

                    b.HasIndex("UserId")
                        .HasDatabaseName("I_IdentityIdentitySession_UserId_39419");

                    b.ToTable("IdentitySession", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityUser<string>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("AccessFailCount")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ActiveUntil")
                        .IsConcurrencyToken()
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("EmailConfirmed")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutDeadline")
                        .IsConcurrencyToken()
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Mobile")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<bool>("MobileConfirmed")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("NormalActionSecretKey")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("NormalizedEmail")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NormalizedUsername")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Password")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(1536)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1536)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("ProfilePictureUri")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("SecurityActionSecretKey")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Summary")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("TwoFactorEnabled")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("TwoFactorSecretKey")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Username")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id")
                        .HasName("P_IdentityIdentityUser_Id_F4081");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentityUser_Email_FB231");

                    b.HasIndex("Mobile")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentityUser_Mobile_E8AA6");

                    b.HasIndex("NormalizedUsername")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentityUser_NormalizedUsername_5DB6D");

                    b.HasIndex("Password")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentityUser_Password_3679C");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentityUser_Username_3635F");

                    b.ToTable("IdentityUser", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityUserClaim<string>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ActiveUntil")
                        .IsRequired()
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id")
                        .HasName("P_IdentityIdentityUserClaim_Id_B38F2");

                    b.HasIndex("UserId")
                        .HasDatabaseName("I_IdentityIdentityUserClaim_UserId_B6704");

                    b.HasIndex("UserId", "Type", "Value")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentityUserClaim_UserId_Type_Value_EE3A5");

                    b.ToTable("IdentityUserClaim", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityUserRecoveryCode<string>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Enabled")
                        .IsConcurrencyToken()
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id")
                        .HasName("P_IdentityIdentityUserRecoveryCode_Id_7BE30");

                    b.HasIndex("UserId")
                        .HasDatabaseName("I_IdentityIdentityUserRecoveryCode_UserId_283F8");

                    b.HasIndex("UserId", "Value")
                        .IsUnique()
                        .HasDatabaseName("U_IdentityIdentityUserRecoveryCode_UserId_Value_C42A6");

                    b.ToTable("IdentityUserRecoveryCode", "Identity");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityAccess<string>", b =>
                {
                    b.HasOne("Insane.AspNet.Identity.Model1.Entity.IdentityRole<string>", "Role")
                        .WithMany("Accesses")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("F_IdentityIdentityAccess_RoleId_652C0");

                    b.HasOne("Insane.AspNet.Identity.Model1.Entity.IdentityUser<string>", "User")
                        .WithMany("Accesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("F_IdentityIdentityAccess_UserId_6435A");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityPlatform<string>", b =>
                {
                    b.HasOne("Insane.AspNet.Identity.Model1.Entity.IdentityUser<string>", "AdminUser")
                        .WithMany("ManagedPlatforms")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentitySession<string>", b =>
                {
                    b.HasOne("Insane.AspNet.Identity.Model1.Entity.IdentityPlatform<string>", "Platform")
                        .WithMany("Sessions")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("F_IdentityIdentitySession_PlatformId_F7913");

                    b.HasOne("Insane.AspNet.Identity.Model1.Entity.IdentityUser<string>", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("F_IdentityIdentitySession_UserId_C4F37");

                    b.Navigation("Platform");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Insane.AspNet.Identity.Model1.Entity.IdentityUser<string>", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("F_IdentityIdentityUserClaim_UserId_11415");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityUserRecoveryCode<string>", b =>
                {
                    b.HasOne("Insane.AspNet.Identity.Model1.Entity.IdentityUser<string>", "User")
                        .WithMany("RecoveryCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("F_IdentityIdentityUserRecoveryCode_UserId_45B90");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityPlatform<string>", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityRole<string>", b =>
                {
                    b.Navigation("Accesses");
                });

            modelBuilder.Entity("Insane.AspNet.Identity.Model1.Entity.IdentityUser<string>", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("Claims");

                    b.Navigation("ManagedPlatforms");

                    b.Navigation("RecoveryCodes");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
